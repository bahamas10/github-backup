#!/usr/bin/env bash
#
# Backup all github repositories from a given user
#
# Author: Dave Eddy <dave@daveeddy.com>

api='https://api.github.com'

user=$1
dest=${2:-$PWD}
per_page=100

usage() {
	cat <<-EOF
	${0##*/} <user> [dest dir]

	Clone and update all repositories of a given user from GitHub
	EOF
}

# Check for user
if [[ -z $user ]]; then
	usage >&2
	exit 1
fi

# Check for jsontool
if ! jq --version &>/dev/null; then
	echo 'Dependency "jq" not found.'
	exit 2
fi

# chdir
cd "$dest" || exit 3

# Handle Pagination
repos=''
i=1
while true; do
	# get the repos
	_repos=$(curl -sS "$api/users/$user/repos?per_page=$per_page&page=$i")

	# Check for error
	if [[ -z $_repos || -n "$(jq -r .message <<< "$_repos" 2>/dev/null)" ]]; then
		echo 'Error pulling repo!' >&2
		echo "$_repos" >&2
		exit 4
	fi

	# get the field we care about
	_repos=$(jq -r '.[].clone_url' <<< "$_repos")

	# Append the fields
	repos=$repos$_repos$'\n'

	# Check to see if we hit the end
	(( $(wc -l <<< "$_repos") < per_page)) && break

	((i++))
done

# loop and update
errors=()
while read git_url; do
	[[ -z $git_url ]] && continue

	echo "-> $git_url"

	# Attempt to clone, this will fail if the repo exists
	git clone "$git_url"

	# basename and extension removal for directory name
	tmp=${git_url##*/}
	dir=${tmp%.git}

	# clone and update in a subshell
	(
		# any error is a failure here
		set -e
		cd "$dir"

		# pull changes
		git fetch origin

		# check if repo is empty on the remote end.  this is kinda
		# lame, but `git rev-parse --is-bare-repository` didn't work
		# for empty repos on github.
		if [[ ! -d .git/refs/remotes ]]; then
			echo 'repository is empty' >&2
			exit 0
		fi

		# reset to upstream
		git reset --hard '@{upstream}'
		git clean -fd
	)
	code=$?

	if ((code != 0)); then
		errors+=("$git_url")
	fi

	echo
done <<< "$repos"

# print errors at end if there were any
if [[ -n ${errors[0]} ]]; then
	echo "=== ${#errors[@]} errors encountered" >&2
	printf -- "- %s\n" "${errors[@]}" >&2
	exit 1
fi
